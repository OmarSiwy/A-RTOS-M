// Generates Linker and Executables required to run the application, and exposes the API to the customer

const std = @import("std");
const chipset = @import("chips.zig");

pub fn GenerateLinker(name: []const u8, flash_origin: ?u64, flash_size: ?u64, ram_origin: ?u64, ram_size: ?u64) void {
    // Setup write to file
    const allocator = std.heap.page_allocator;
    const cwd = try std.fs.cwd();
    var file = try cwd.createFile("bootstrap.ld", .{});
    defer file.close();
    const writer = file.writer();

    const maybe_chip = chipset.Chip.new(name, null, null, null, null);
    if (maybe_chip == null) {
        return error.NoChipFound;
    }
    const chip = maybe_chip.?;

    try writer.print(
        \\/*
        \\ * This file was auto-generated by microzig
        \\ *
        \\ * Target Chip: {s}
        \\ */
        \\
        // This is not the "true" entry point, but there's no such thing on embedded platforms
        // anyways. This is the logical entrypoint that should be invoked when
        // stack, .data and .bss are set up and the CPU is ready to be used.
        \\ENTRY(RTOS_main);
        \\
        \\
    , .{
        .chip = chip.name,
    });

    try writer.writeAll("MEMORY\n{\n");
    {
        var counters = [4]usize{ 0, 0, 0, 0 };
        for (program_args.memory_regions) |region| {
            // flash (rx!w) : ORIGIN = 0x00000000, LENGTH = 512k

            switch (region.kind) {
                .flash => {
                    try writer.print("  flash{d}    (rx!w)", .{counters[0]});
                    counters[0] += 1;
                },

                .ram => {
                    try writer.print("  ram{d}      (rw!x)", .{counters[1]});
                    counters[1] += 1;
                },

                .io => {
                    try writer.print("  io{d}       (rw!x)", .{counters[2]});
                    counters[2] += 1;
                },

                .reserved => {
                    try writer.print("  reserved{d} (rw!x)", .{counters[3]});
                    counters[3] += 1;
                },

                .private => |custom| {
                    try writer.print("  {s} (", .{custom.name});
                    if (custom.readable) try writer.writeAll("r");
                    if (custom.writeable) try writer.writeAll("w");
                    if (custom.executable) try writer.writeAll("x");

                    if (!custom.readable or !custom.writeable or !custom.executable) {
                        try writer.writeAll("!");
                        if (!custom.readable) try writer.writeAll("r");
                        if (!custom.writeable) try writer.writeAll("w");
                        if (!custom.executable) try writer.writeAll("x");
                    }
                    try writer.writeAll(")");
                },
            }
            try writer.print(" : ORIGIN = 0x{X:0>8}, LENGTH = 0x{X:0>8}\n", .{ region.offset, region.length });
        }
    }

    try writer.writeAll("}\n\nSECTIONS\n{\n");
    {
        try writer.writeAll(
            \\  .text :
            \\  {
            \\     KEEP(*(microzig_flash_start))
            \\     *(.text*)
            \\  } > flash0
            \\
            \\
        );

        switch (program_args.cpu_arch) {
            .arm, .thumb => try writer.writeAll(
                \\  .ARM.exidx : {
                \\      *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                \\  } >flash0
                \\
                \\
            ),
            else => {},
        }

        try writer.writeAll(
            \\  .data :
            \\  {
            \\     microzig_data_start = .;
            \\     *(.sdata*)
            \\     *(.data*)
            \\     *(.rodata*)
            \\     microzig_data_end = .;
            \\  } > ram0 AT> flash0
            \\
            \\  .bss (NOLOAD) :
            \\  {
            \\      microzig_bss_start = .;
            \\      *(.bss*)
            \\      microzig_bss_end = .;
            \\  } > ram0
            \\
            \\  microzig_data_load_start = LOADADDR(.data);
            \\
        );
    }

    switch (program_args.cpu_arch) {
        .riscv32, .riscv64 => try writer.writeAll(
            \\  PROVIDE(__global_pointer$ = microzig_data_start + 0x800);
        ),
        else => {},
    }

    try writer.writeAll("}\n");

    // TODO: Assert that the flash can actually hold all data!
    // try writer.writeAll(
    //     \\
    //     \\  ASSERT( (SIZEOF(.text) + SIZEOF(.data) > LENGTH(flash0)), "Error: .text + .data is too large for flash!" );
    //     \\
    // );
}
